void RenderObject::LoadModel(std::string path) {
	std::ifstream reader(path);

	std::vector<glm::vec3> positions;
	std::vector<glm::vec2> uvs;
	std::vector<float> verts;
	std::vector<unsigned int> tris;

	if (reader.is_open()) {
		std::string line;
		while (std::getline(reader, line)) {
			if (line.empty()) continue;

			std::vector<std::string> parts;
			split(line, parts, ' ');
			if (parts[0] == "v") {
				float x = std::stof(parts[1]);
				float y = std::stof(parts[2]);
				float z = std::stof(parts[3]);
				positions.emplace_back(x, y, z);
			}
			else if (parts[0] == "vt") {
				float u = std::stof(parts[1]);
				float v = std::stof(parts[2]);
				uvs.emplace_back(u, v);
			}
			else if (parts[0] == "f") {
				for (int i = 1; i <= 3; i++) {
					std::vector<std::string> indices;
					split(parts[i], indices, '/');
					int posIndex = std::stoi(indices[0]) - 1;
					int uvIndex = std::stoi(indices[1]) - 1;
					verts.push_back(positions[posIndex].x);
					verts.push_back(positions[posIndex].y);
					verts.push_back(positions[posIndex].z);
					verts.push_back(uvs[uvIndex].x);
					verts.push_back(uvs[uvIndex].y);
					tris.push_back(posIndex);
				}
			}
		}
		reader.close();
	}

	triLength = tris.size();

	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	glGenBuffers(1, &EBO);

	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(verts.data()), verts.data(), GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(tris.data()), tris.data(), GL_STATIC_DRAW);

	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	return;
}